name: Deploy to EC2

on:
  # push:
  #   branches:
  #     - main # main 브랜치에 풀리퀘 시 실행

  push:
    branches:
      - github_action # 임시 실행

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Debuggings # test 나중에 지우기
        run: |
          set +x  # Secrets 값 직접 출력 방지
          if [[ -z "${{ secrets.DOCKER_USERNAME }}" ]]; then echo " DOCKER_USERNAME is NOT set"; else echo "DOCKER_USERNAME is set"; fi
          if [[ -z "${{ secrets.DOCKER_PASSWORD }}" ]]; then echo " DOCKER_PASSWORD is NOT set"; else echo "DOCKER_PASSWORD is set"; fi

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Test Docker Hub Connection # test 나중에 지우기
        run: curl -I https://registry-1.docker.io/v2/library/python/tags/list

      - name: Debug Docker Hub # test 나중에 지우기
        run: |
          set +x
          echo "Checking Docker Hub credentials..."
          echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
          if [[ -z "${{ secrets.DOCKER_PASSWORD }}" ]]; then
            echo "❌ DOCKER_PASSWORD is NOT set"
          else
            echo "✅ DOCKER_PASSWORD is set"
          fi

      - name: Verify Docker Login # test 나중에 지우기
        run: |
          docker info | grep Username

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/ybigta:latest .

      - name: Check Built Docker Images # test 나중에 지우기
        run: docker images

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ybigta:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Debugging2 # test 나중에 지우기
        run: |
          set +x  #  Secrets 값 직접 출력 방지
          if [[ -z "${{ secrets.EC2_HOST }}" ]]; then echo " EC2_HOST is NOT set"; else echo "EC2_HOST is set"; fi
          if [[ -z "${{ secrets.EC2_USER }}" ]]; then echo " EC2_USER is NOT set"; else echo "EC2_USER is set"; fi
          if [[ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]]; then echo " EC2_SSH_PRIVATE_KEY is NOT set"; else echo "EC2_SSH_PRIVATE_KEY is set"; fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # 기존 컨테이너 중지 및 삭제
            # sudo docker kill mycontainer
            # # myapp 지워지면 아래 코드 없애기
            # sudo docker stop myapp || true
            # sudo docker rm myapp || true

            # sudo docker stop my-app || true
            # sudo docker rm my-app || true

            # myapp 지워지면 아래 주석 해제
            # sudo docker stop ybigta || true
            # sudo docker rm ybigta || true

            sudo docker stop $(docker ps -aq) || true
            sudo docker rm $(docker ps -aq) || true

            # ✅ 모든 중지된 컨테이너 삭제 (prune 사용)
            sudo docker container prune -f

            # 최신 Docker 이미지 가져오기
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/ybigta:latest

            # 새 컨테이너 실행
            sudo docker run -d --name ybigta -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/ybigta:latest

# name: Test EC2 SSH

# on:
#   push:
#     branches:
#       - main
#   # pull_request:
#   #   branches:
#   #     - main

# jobs:
#   test-ssh:
#     name: Connect to EC2
#     runs-on: ubuntu-latest

#     env:
#       EC2_HOST: ${{ secrets.EC2_HOST }}
#       EC2_USER: ${{ secrets.EC2_USER }}

#     steps:
#       - name: Debug Secrets
#         run: |
#           set +x  # 로그에 출력 방지
#           echo "EC2_HOST is set"

# - name: Connect to EC2 via SSH
#   uses: appleboy/ssh-action@master
#   with:
#     host: ${{ env.EC2_HOST }}
#     username: ${{ env.EC2_USER }}
#     key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#     script: |
#       echo "Successfully connected to EC2!"
#       docker -v
