name: Deploy to EC2

on:
  # pull_request:
  #   branches:
  #     - main # main 브랜치에 풀리퀘 시 실행

  push:
    branches:
      - github_action # 임시 실행

jobs:
  # build-and-push:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Debugging
  #       run: |
  #         set +x  # Secrets 값 직접 출력 방지
  #         if [[ -z "${{ secrets.DOCKER_USERNAME }}" ]]; then echo " DOCKER_USERNAME is NOT set"; else echo "DOCKER_USERNAME is set"; fi
  #         if [[ -z "${{ secrets.DOCKER_PASSWORD }}" ]]; then echo " DOCKER_PASSWORD is NOT set"; else echo "DOCKER_PASSWORD is set"; fi

  #     - name: Log in to Docker Hub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

  #     - name: Build Docker Image
  #       run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .

  #     - name: Push Docker Image to Docker Hub
  #       run: docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    # needs: build-and-push

    steps:
      - name: Debugging2
        run: |
          set +x  #  Secrets 값 직접 출력 방지
          if [[ -z "${{ mysecret.EC2_HOST }}" ]]; then echo " EC2_HOST is NOT set"; else echo "EC2_HOST is set"; fi
          if [[ -z "${{ mysecret.EC2_USER }}" ]]; then echo " EC2_USER is NOT set"; else echo "EC2_USER is set"; fi
          if [[ -z "${{ mysecret.EC2_SSH_PRIVATE_KEY }}" ]]; then echo " EC2_SSH_PRIVATE_KEY is NOT set"; else echo "EC2_SSH_PRIVATE_KEY is set"; fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ mysecret.EC2_HOST }}
          username: ${{ mysecret.EC2_USER }}
          key: ${{ mysecret.EC2_SSH_PRIVATE_KEY }}
          script: |
            docker stop my-app || true
            docker rm my-app || true
            docker pull ${{ mysecret.DOCKER_USERNAME }}/my-app:latest
            docker run -d --name my-app -p 80:80 ${{ mysecret.DOCKER_USERNAME }}/my-app:latest

# name: Test EC2 SSH

# on:
#   push:
#     branches:
#       - main
#   # pull_request:
#   #   branches:
#   #     - main

# jobs:
#   test-ssh:
#     name: Connect to EC2
#     runs-on: ubuntu-latest

#     env:
#       EC2_HOST: ${{ secrets.EC2_HOST }}
#       EC2_USER: ${{ secrets.EC2_USER }}

#     steps:
#       - name: Debug Secrets
#         run: |
#           set +x  # 로그에 출력 방지
#           echo "EC2_HOST is set"

# - name: Connect to EC2 via SSH
#   uses: appleboy/ssh-action@master
#   with:
#     host: ${{ env.EC2_HOST }}
#     username: ${{ env.EC2_USER }}
#     key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#     script: |
#       echo "Successfully connected to EC2!"
#       docker -v
